var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:fqpabi8 \n 個人倉儲: https://github.com/mdecp2024/hw-ZJJ41323248 \n 個人網站: https://mdecp2024.github.io/hw-ZJJ41323248/ \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': '\n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w10', 'text': '第一題 \n \n \n 第二題 \n \n \n 第三題 \n \n \n 心得: \n \xa0 \xa0在這個學期的計算機程式課程中，雖然上課有再聽，但是還是很難，幸虧有同學們的幫忙，不然我上學期要不被當真的有點困難，像是今天隨堂測驗，有三題，前兩題想一下就可以完成。但當到了第三題，就真的難倒我了，幸虧老師這次考試手下留情，有提供我們程式，不然我可能真的要被第三題打的體無完膚了，雖然帝一次接觸程式語言學習起來真的非常困難，但是在未來，程式真的很重要，所以我會努力去學習。 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11', 'text': '課堂程式作業 \n 11*11的灰色框架 \n \n \n hw-1: \n 用 Python 程式 由上往下列印三角形 * , 或 由左往右列印三角形 * 延伸為用"*"在10*10區塊中構成的一個實心圓 \n 實心圓 \n hw-2: \n 利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.( 網頁上的方格與塗色 ) \n 用黑色方塊在10*10區塊內圍成的圓形 \n 提示:貼上網頁要在網址的後方加上?src="自己程式的網址" \n 心得: \n 在做這個作業的過程中有使用到ChatGPT，也了解到它有多方便，但是它也不是沒有缺點，在我做這個作業的過程中就有感覺到，它好像也不是那麼聰明，因為你如果沒有講得很清楚，它是會會錯意的，這也讓我相信凡事都是一體兩面的。 \n', 'tags': '', 'url': 'w11.html'}, {'title': 'W12', 'text': '\xa0請各組組員分別利用\xa0 Brython 以及 Jupyter lab \xa0環境, 執行 可攜程式 \xa0notebook 目錄中的\xa0 01_string_input_print.ipynb 至\xa010_for_search.ipynb \xa0筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人\xa0 Gist \xa0後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得. \n Brython: 09_for_loop_if_equals.ipynb \xa0 \n 程式語法: Python\xa0 \n 心得:當我一開始在執行程式的時候，本來還懷疑我的筆電是不是壞掉了，因為她一直顯示執行錯誤，但是當我執行到一半我問我室友他們怎麼樣，他們說他們也一樣，所以我再去仔細地看了一遍老師的題目，才發現說原來是要我們找1~10 裡面可以執行的那一個，所以我就一直執行到第九個，終於，讓我給找到了可以執行的那一個，這個程式大概就是再說，它會列出一些動物，當執行到企鵝時它會特別強調。', 'tags': '', 'url': 'W12.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w5', 'text': "print 與 for 重複迴圈 \n help(print) \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n \n \n \n Help   on built - in   function  print   in   module builtins: \n \xa0 \n print (...) \n \xa0\xa0\xa0\xa0 print (value, ..., sep = ' ' , end = '\\n' ,  file = sys.stdout, flush = False ) \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 Prints the values to a stream,  or   to sys.stdout by default. \n \xa0\xa0\xa0\xa0 Optional keyword arguments: \n \xa0\xa0\xa0\xa0 file :\xa0 a  file - like  object   (stream); defaults to the current sys.stdout. \n \xa0\xa0\xa0\xa0 sep:\xa0\xa0 string inserted between values, default a space. \n \xa0\xa0\xa0\xa0 end:\xa0\xa0 string appended after the last value, default a newline. \n \xa0\xa0\xa0\xa0 flush: whether to forcibly flush the stream. \n \n \n \n \n \n \n \n help(range) \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n \n \n \n Help   on  class   range   in   module builtins: \n \xa0 \n class   range ( object ) \n \xa0 |\xa0  range (stop)  - >  range   object \n \xa0 |\xa0  range (start, stop[, step])  - >  range   object \n \xa0 |\xa0  \n \xa0 |\xa0 Return an  object   that produces a sequence of integers  from   start (inclusive) \n \xa0 |\xa0 to stop (exclusive) by step.\xa0  range (i, j) produces i, i + 1 , i + 2 , ..., j - 1. \n \xa0 |\xa0 start defaults to  0 ,  and   stop  is   omitted!\xa0  range ( 4 ) produces  0 ,  1 ,  2 ,  3. \n \xa0 |\xa0 These are exactly the valid indices  for   a  list   of  4   elements. \n \xa0 |\xa0 When step  is   given, it specifies the increment ( or   decrement). \n \xa0 |\xa0  \n \xa0 |\xa0 Methods defined here: \n \xa0 |\xa0  \n \xa0 |\xa0 __bool__( self ,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0  True   if   self   else   False \n \xa0 |\xa0  \n \xa0 |\xa0 __contains__( self , key,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Return key  in   self . \n \xa0 |\xa0  \n \xa0 |\xa0 __eq__( self , value,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Return  self = = value. \n \xa0 |\xa0  \n \xa0 |\xa0 __ge__( self , value,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Return  self > = value. \n \xa0 |\xa0  \n \xa0 |\xa0 __getattribute__( self , name,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Return  getattr ( self , name). \n \xa0 |\xa0  \n \xa0 |\xa0 __getitem__( self , key,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Return  self [key]. \n \xa0 |\xa0  \n \xa0 |\xa0 __gt__( self , value,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Return  self >value. \n \xa0 |\xa0  \n \xa0 |\xa0 __hash__( self ,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Return  hash ( self ). \n \xa0 |\xa0  \n \xa0 |\xa0 __iter__( self ,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Implement  iter ( self ). \n \xa0 |\xa0  \n \xa0 |\xa0 __le__( self , value,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Return  self < = value. \n \xa0 |\xa0  \n \xa0 |\xa0 __len__( self ,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Return  len ( self ). \n \xa0 |\xa0  \n \xa0 |\xa0 __lt__( self , value,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Return  self <value. \n \xa0 |\xa0  \n \xa0 |\xa0 __ne__( self , value,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Return  self ! = value. \n \xa0 |\xa0  \n \xa0 |\xa0 __reduce__(...) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Helper  for   pickle. \n \xa0 |\xa0  \n \xa0 |\xa0 __repr__( self ,  / ) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Return  repr ( self ). \n \xa0 |\xa0  \n \xa0 |\xa0 __reversed__(...) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Return a reverse iterator. \n \xa0 |\xa0  \n \xa0 |\xa0 count(...) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 rangeobject.count(value)  - > integer  - -   return   number of occurrences of value \n \xa0 |\xa0  \n \xa0 |\xa0 index(...) \n \xa0 |\xa0\xa0\xa0\xa0\xa0 rangeobject.index(value)  - > integer  - -   return   index of value. \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Raise ValueError  if   the value  is   not   present. \n \xa0 |\xa0  \n \xa0 |\xa0  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n \xa0 |\xa0 Static methods defined here: \n \xa0 |\xa0  \n \xa0 |\xa0 __new__( * args,  * * kwargs)  from   builtins. type \n \xa0 |\xa0\xa0\xa0\xa0\xa0 Create  and   return   a new  object .\xa0 See  help ( type )  for   accurate signature. \n \xa0 |\xa0  \n \xa0 |\xa0  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n \xa0 |\xa0 Data descriptors defined here: \n \xa0 |\xa0  \n \xa0 |\xa0 start \n \xa0 |\xa0  \n \xa0 |\xa0 step \n \xa0 |\xa0  \n \xa0 |\xa0 stop \n \n \n \n \n \n \n \n 與 ChatGPT 對話: \n 可以解釋一下help(range) 傳回來的內容嗎? \n 將 help(range) 傳回的內容貼給 ChatGPT, 然後問: \n 可以舉例詳細說明以下 help(range) 傳回來的內容嗎? 然後貼上 help 傳回的資料. \n 詢問 for i in range(): \n 如何解釋 Python 中的 for i in range(5): \n 如何解釋 range(5) ? \n range(5) 是數列嗎? \n 能夠生成從 0 到 4 的整數序列, 所以可以稱 range(5) 為甚麼? \n 請舉 10 個可以協助使用者理解 for range 與 print 等關鍵字的範例 \n 請用 Python 的 for 跟 print 印出五行的 * 排列成的三角形金字塔, 也就是 * 在最中間, 第二行為正中央的 *** 然後第三行 *****, 總共五行. \n 請詳細解釋你的解法過程 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n \n \n \n 問題分析 \n \xa0 \n 我們希望生成一個由星號  *   組成的金字塔，總共  5   行，並且使星號在每一行中間對齊。金字塔的形狀如下： \n \xa0 \n \xa0\xa0\xa0\xa0 * \n \xa0\xa0\xa0 * * * \n \xa0\xa0 * * * * * \n \xa0 * * * * * * * \n * * * * * * * * * \n \xa0 \n 解法步驟 \n \xa0 \n \xa0\xa0\xa0\xa0 設定行數： 我們首先定義金字塔的行數。這裡我們設置 n  =   5 ，代表金字塔有  5   行。 \n \xa0 \n \xa0\xa0\xa0\xa0 使用  for   迴圈： 我們將使用  for   迴圈來迭代每一行。 range (n) 會生成從  0   到  4   的整數，對應於每一行的索引。 \n \xa0 \n \xa0\xa0\xa0\xa0 計算空格數： 為了使星號在每一行中間對齊，我們需要在星號前面印出一些空格。 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 在第 i 行，前面需要印出 n  -   i  -   1   個空格。這樣可以確保每一行的星號都在金字塔的中間位置。 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 例如，在第  0   行（第一行）需要  4   個空格，在第  1   行需要  3   個空格，以此類推。 \n \xa0 \n \xa0\xa0\xa0\xa0 計算星號數： 每一行的星號數量是  2   *   i  +   1 。 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 在第  0   行有  1   個星號，第一行有  3   個星號，第二行有  5   個星號，依此類推，這樣的模式使得每行的星號數量都是奇數並且增加。 \n \xa0 \n \xa0\xa0\xa0\xa0 印出結果： 使用  print () 函數印出計算得出的空格和星號。在第一個  print   中使用 end = '' 是為了避免換行，使得空格和星號能在同一行內輸出。 \n \xa0 \n 程式碼實現 \n \xa0 \n 以下是完整的程式碼和註解： \n \xa0 \n python \n \xa0 \n n  =   5 \xa0  # 總共的行數 \n \xa0 \n for   i  in   range (n):\xa0  # 對於每一行 \n \xa0\xa0\xa0\xa0 # 印出空格 \n \xa0\xa0\xa0\xa0 print ( ' '   *   (n  -   i  -   1 ), end = '')\xa0  # 在每行前面印出空格 \n \xa0\xa0\xa0\xa0 # 印出星號 \n \xa0\xa0\xa0\xa0 print ( '*'   *   ( 2   *   i  +   1 ))\xa0  # 每行印出 2*i + 1 個星號 \n \xa0 \n 執行結果 \n \xa0 \n 當你執行這段程式碼時，它會輸出一個對稱的金字塔，每一行的星號數量和位置都符合我們的要求。 \n \n \n \n \n \n \n \n \n", 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '操作步驟: \n \n 下載\xa0 python_2025_lite.7z \xa0(可攜程式環境) \n 下載 \xa0 zmq_remote_api_ex_cube_triangle.7z \xa0(利用 Python 控制模擬場景中的物件) \n 進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式, \xa0 原始碼 ) \n 啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器 \n 執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出: \n netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050 netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050 \n 開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream \n 利用 SciTE 開啟\xa0put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式 \n 使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景 \n 120.113.99.48:23020 \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};